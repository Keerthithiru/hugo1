[{"uri":"http://example.org/posts/my-firstpost/","title":"Java","tags":[],"description":"","content":"Chapter 1 Basics Discover what this Java is all about and the core-concepts behind it.\n"},{"uri":"http://example.org/java/","title":"Javae","tags":[],"description":"","content":""},{"uri":"http://example.org/java/object/","title":"Objects","tags":[],"description":"","content":"Java is an Object-Oriented Language. As a language that has the Object-Oriented feature, Java supports the following fundamental concepts −\n Polymorphism Inheritance Encapsulation Abstraction Classes Objects Instance Method Message Passing  In this chapter, we will look into the concepts - Classes and Objects.\nObject − Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. An object is an instance of a class.\nClass − A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.\nObjects in Java\n   Let us now look deep into what are objects. If we consider the real-world, we can find many objects around us, cars, dogs, humans, etc. All these objects have a state and a behavior.\n  If we consider a dog, then its state is - name, breed, color, and the behavior is - barking, wagging the tail, running.\n  If you compare the software object with a real-world object, they have very similar characteristics.\n  Software objects also have a state and a behavior. A software object\u0026rsquo;s state is stored in fields and behavior is shown via methods.\n  So in software development, methods operate on the internal state of an object and the object-to-object communication is done via methods.\n  Classes in Java\n A class is a blueprint from which individual objects are created.\nFollowing is a sample of a class.\nExample\npublic class Dog { String breed; int age; String color; void barking() { } void hungry() { } void sleeping() { } } A class can contain any of the following variable types.\n1.Local variables − Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.\n2.Instance variables − Instance variables are variables within a class but outside any method. These variables are initialized when the class is instantiated. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.\n3.Class variables − Class variables are variables declared within a class, outside any method, with the static keyword.\nA class can have any number of methods to access the value of various kinds of methods. In the above example, barking(), hungry() and sleeping() are methods.\nFollowing are some of the important topics that need to be discussed when looking into classes of the Java Language.\nConstructors\n When discussing about classes, one of the most important sub topic would be constructors. Every class has a constructor. If we do not explicitly write a constructor for a class, the Java compiler builds a default constructor for that class.\nEach time a new object is created, at least one constructor will be invoked. The main rule of constructors is that they should have the same name as the class. A class can have more than one constructor.\nFollowing is an example of a constructor −\nExample\npublic class Puppy { public Puppy() { } public Puppy(String name) { // This constructor has one parameter, name.  } } Java also supports Singleton Classes where you would be able to create only one instance of a class.\nNote − We have two different types of constructors. We are going to discuss constructors in detail in the subsequent chapters.\nAs mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects.\nThere are three steps when creating an object from a class −\nDeclaration − A variable declaration with a variable name with an object type.\nInstantiation − The \u0026lsquo;new\u0026rsquo; keyword is used to create the object.\nInitialization − The \u0026lsquo;new\u0026rsquo; keyword is followed by a call to a constructor. This call initializes the new object.\nFollowing is an example of creating an object −\nExample\nLive Demo public class Puppy { public Puppy(String name) { // This constructor has one parameter, name.  System.out.println(\u0026#34;Passed Name is :\u0026#34; + name ); } public static void main(String []args) { // Following statement would create an object myPuppy  Puppy myPuppy = new Puppy( \u0026#34;tommy\u0026#34; ); } } If we compile and run the above program, then it will produce the following result −\nOutput\nPassed Name is :tommy Accessing Instance Variables and Methods\n Instance variables and methods are accessed via created objects. To access an instance variable, following is the fully qualified path −\n/* First create an object */ ObjectReference = new Constructor(); /* Now call a variable as follows */ ObjectReference.variableName; /* Now you can call a class method as follows */ ObjectReference.MethodName(); Example\nThis example explains how to access instance variables and methods of a class.\nLive Demo public class Puppy { int puppyAge; public Puppy(String name) { // This constructor has one parameter, name.  System.out.println(\u0026#34;Name chosen is :\u0026#34; + name ); } public void setAge( int age ) { puppyAge = age; } public int getAge( ) { System.out.println(\u0026#34;Puppy\u0026#39;s age is :\u0026#34; + puppyAge ); return puppyAge; } public static void main(String []args) { /* Object creation */ Puppy myPuppy = new Puppy( \u0026#34;tommy\u0026#34; ); /* Call class method to set puppy\u0026#39;s age */ myPuppy.setAge( 2 ); /* Call another class method to get puppy\u0026#39;s age */ myPuppy.getAge( ); /* You can access instance variable as follows as well */ System.out.println(\u0026#34;Variable Value :\u0026#34; + myPuppy.puppyAge ); } } If we compile and run the above program, then it will produce the following result −\nOutput\nName chosen is :tommy Puppy\u0026#39;s age is :2 Variable Value :2 Source File Declaration Rules\n   As the last part of this section, let\u0026rsquo;s now look into the source file declaration rules. These rules are essential when declaring classes, import statements and package statements in a source file.\n  There can be only one public class per source file.\n  A source file can have multiple non-public classes.\n  The public class name should be the name of the source file as well which should be appended by .java at the end. For example: the class name is public class Employee{} then the source file should be as Employee.java.\n  If the class is defined inside a package, then the package statement should be the first statement in the source file.\n  If import statements are present, then they must be written between the package statement and the class declaration. If there are no package statements, then the import statement should be the first line in the source file.\n  Import and package statements will imply to all the classes present in the source file. It is not possible to declare different import and/or package statements to different classes in the source file.\n  Classes have several access levels and there are different types of classes; abstract classes, final classes, etc. We will be explaining about all these in the access modifiers chapter.\n  Apart from the above mentioned types of classes, Java also has some special classes called Inner classes and Anonymous classes.\n  Java Package\nIn simple words, it is a way of categorizing the classes and interfaces. When developing applications in Java, hundreds of classes and interfaces will be written, therefore categorizing these classes is a must as well as makes life much easier.\nImport Statements\n In Java if a fully qualified name, which includes the package and the class name is given, then the compiler can easily locate the source code or classes. Import statement is a way of giving the proper location for the compiler to find that particular class. For example, the following line would ask the compiler to load all the classes available in directory java_installation/java/io − import java.io.*;  A Simple Case Study\n For our case study, we will be creating two classes. They are Employee and EmployeeTest. First open notepad and add the following code. Remember this is the Employee class and the class is a public class. Now, save this source file with the name Employee.java. The Employee class has four instance variables - name, age, designation and salary. The class has one explicitly defined constructor, which takes a parameter.  Example\nimport java.io.*; public class Employee { String name; int age; String designation; double salary; // This is the constructor of the class Employee  public Employee(String name) { this.name = name; } // Assign the age of the Employee to the variable age.  public void empAge(int empAge) { age = empAge; } /* Assign the designation to the variable designation.*/ public void empDesignation(String empDesig) { designation = empDesig; } /* Assign the salary to the variable\tsalary.*/ public void empSalary(double empSalary) { salary = empSalary; } /* Print the Employee details */ public void printEmployee() { System.out.println(\u0026#34;Name:\u0026#34;+ name ); System.out.println(\u0026#34;Age:\u0026#34; + age ); System.out.println(\u0026#34;Designation:\u0026#34; + designation ); System.out.println(\u0026#34;Salary:\u0026#34; + salary); } } As mentioned previously in this tutorial, processing starts from the main method. Therefore, in order for us to run this Employee class there should be a main method and objects should be created. We will be creating a separate class for these tasks.\nFollowing is the EmployeeTest class, which creates two instances of the class Employee and invokes the methods for each object to assign values for each variable.\nSave the following code in EmployeeTest.java file.\nimport java.io.*; public class EmployeeTest { public static void main(String args[]) { /* Create two objects using constructor */ Employee empOne = new Employee(\u0026#34;James Smith\u0026#34;); Employee empTwo = new Employee(\u0026#34;Mary Anne\u0026#34;); // Invoking methods for each object created  empOne.empAge(26); empOne.empDesignation(\u0026#34;Senior Software Engineer\u0026#34;); empOne.empSalary(1000); empOne.printEmployee(); empTwo.empAge(21); empTwo.empDesignation(\u0026#34;Software Engineer\u0026#34;); empTwo.empSalary(500); empTwo.printEmployee(); } } Now, compile both the classes and then run EmployeeTest to see the result as follows −\nOutput\nC:\\\u0026gt; javac Employee.java C:\\\u0026gt; javac EmployeeTest.java C:\\\u0026gt; java EmployeeTest Name:James Smith Age:26 Designation:Senior Software Engineer Salary:1000.0 Name:Mary Anne Age:21 Designation:Software Engineer Salary:500.0 "},{"uri":"http://example.org/","title":"Tesco training","tags":[],"description":"","content":""},{"uri":"http://example.org/java/basicsyntax/","title":"Basicsyntax","tags":[],"description":"","content":"When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other\u0026rsquo;s methods. Let us now briefly look into what do class, object, methods, and instance variables mean.\nobjects − Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.\nClass − A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.\nMethods − A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.\nInstance Variables − Each object has its unique set of instance variables. An object\u0026rsquo;s state is created by the values assigned to these instance variables.\nFirst Java Program Let us look at a simple code that will print the words Hello World.\nExample\nLive Demo\npublic class MyFirstJavaProgram { /* This is my first java program. * This will print \u0026#39;Hello World\u0026#39; as the output */ public static void main(String []args) { System.out.println(\u0026#34;Hello World\u0026#34;); // prints Hello World  } } Let\u0026rsquo;s look at how to save the file, compile, and run the program. Please follow the subsequent steps −\n  Open notepad and add the code as above.\n  Save the file as: MyFirstJavaProgram.java.\n  Open a command prompt window and go to the directory where you saved the class. Assume it\u0026rsquo;s C:.\n  Type \u0026lsquo;javac MyFirstJavaProgram.java\u0026rsquo; and press enter to compile your code. If there are no errors in your code, the command prompt will take you to the next line (Assumption : The path variable is set).\n  Now, type ' java MyFirstJavaProgram ' to run your program.\n  You will be able to see ' Hello World ' printed on the window.\n  Output C:\\\u0026gt; javac MyFirstJavaProgram.java C:\\\u0026gt; java MyFirstJavaProgram Hello World Basic Syntax  About Java programs, it is very important to keep in mind the following points.\n  Case Sensitivity − Java is case sensitive, which means identifier Hello and hello would have different meaning in Java.\n  Class Names − For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word\u0026rsquo;s first letter should be in Upper Case.\nExample : class MyFirstJavaClass\n  Method Names − All method names should start with a Lower Case letter. If several words are used to form the name of the method, then each inner word\u0026rsquo;s first letter should be in Upper Case.\nExample: public void myMethodName()\n  Program File Name − Name of the program file should exactly match the class name.\n  When saving the file, you should save it using the class name (Remember Java is case sensitive) and append \u0026lsquo;.java\u0026rsquo; to the end of the name (if the file name and the class name do not match, your program will not compile).\n  But please make a note that in case you do not have a public class present in the file then file name can be different than class name. It is also not mandatory to have a public class in the file.\n  Example: Assume \u0026lsquo;MyFirstJavaProgram\u0026rsquo; is the class name. Then the file should be saved as \u0026lsquo;MyFirstJavaProgram.java\u0026rsquo;\n public static void main(String args[]) − Java program processing starts from the main() method which is a mandatory part of every Java program.    Java Identifiers    All Java components require names. Names used for classes, variables, and methods are called identifiers.\n  In Java, there are several points to remember about identifiers. They are as follows −\n  All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).\n  After the first character, identifiers can have any combination of characters.\n  A key word cannot be used as an identifier.\n  Most importantly, identifiers are case sensitive.\n  Examples of legal identifiers: age, $salary, _value, __1_value.\nExamples of illegal identifiers: 123abc, -salary.\nJava Modifiers    Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers −\n  Access Modifiers − default, public , protected, private\n  Non-access Modifiers − final, abstract, strictfp\n  We will be looking into more details about modifiers in the next section.\nJava Variables  Following are the types of variables in Java −\n Local Variables Class Variables (Static Variables) Instance Variables (Non-static Variables)  Java Arrays  Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters.\nJava Enums  Enums were introduced in Java 5.0. Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.\nWith the use of enums it is possible to reduce the number of bugs in your code.\nFor example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.\nExample\nLive Demo class FreshJuice { enum FreshJuiceSize{ SMALL, MEDIUM, LARGE } FreshJuiceSize size; } public class FreshJuiceTest { public static void main(String args[]) { FreshJuice juice = new FreshJuice(); juice.size = FreshJuice.FreshJuiceSize.MEDIUM ; System.out.println(\u0026#34;Size: \u0026#34; + juice.size); } } The above example will produce the following result −\nOutput Size: MEDIUM Note − Enums can be declared as their own or inside a class. Methods, variables, constructors can be defined inside enums as well.\nJava Keywords  The following list shows the reserved words in Java. These reserved words may not be used as constant or variable or any other identifier names.\n   abstract assert boolean break     byte case catch char   class const continue default   do double else enum   extends final finally float   for goto if implements   import instanceof int interface   long native new package   private protected public return   short static strictfp super   switch synchronized this throw   throws transient try void   volatile while      Comments in Java  Java supports single-line and multi-line comments very similar to C and C++. All characters available inside any comment are ignored by Java compiler. Example\nLive Demo public class MyFirstJavaProgram { /* This is my first java program. * This will print \u0026#39;Hello World\u0026#39; as the output * This is an example of multi-line comments. */ public static void main(String []args) { // This is an example of single line comment  /* This is also an example of single line comment. */ System.out.println(\u0026#34;Hello World\u0026#34;); } } Output Hello World "},{"uri":"http://example.org/java/overview/","title":"Overview","tags":[],"description":"","content":"  Java programming language was originally developed by Sun Microsystems which was initiated by James Gosling and released in 1995 as core component of Sun Microsystems' Java platform (Java 1.0 [J2SE]).\n  The latest release of the Java Standard Edition is Java SE 8. With the advancement of Java and its widespread popularity, multiple configurations were built to suit various types of platforms. For example: J2EE for Enterprise Applications, J2ME for Mobile Applications.\n  The new J2 versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be Write Once, Run Anywhere.\n  Java is −\n  Object Oriented − In Java, everything is an Object. Java can be easily extended since it is based on the Object model.\n  Platform Independent − Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Virtual Machine (JVM) on whichever platform it is being run on.\n  Simple − Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master.\n  Secure − With Java\u0026rsquo;s secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption.\n  Architecture-neutral − Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system.\n  Portable − Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset.\n  Robust − Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking.\n  Multithreaded − With Java\u0026rsquo;s multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly.\n  Interpreted − Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process.\n  High Performance − With the use of Just-In-Time compilers, Java enables high performance.\n  Distributed − Java is designed for the distributed environment of the internet.\n  Dynamic − Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.\n  History of Java\n   James Gosling initiated Java language project in June 1991 for use in one of his many set-top box projects. The language, initially called ‘Oak’ after an oak tree that stood outside Gosling\u0026rsquo;s office, also went by the name ‘Green’ and ended up later being renamed as Java, from a list of random words.\n  Sun released the first public implementation as Java 1.0 in 1995. It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms.\n  On 13 November, 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL).\n  On 8 May, 2007, Sun finished the process, making all of Java\u0026rsquo;s core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright.\n  Tools You Will Need\n  For performing the examples discussed in this tutorial, you will need a Pentium 200-MHz computer with a minimum of 64 MB of RAM (128 MB of RAM recommended).\n  You will also need the following softwares −\n  1.Linux 7.1 or Windows xp/7/8 operating system 2.Java JDK 8 3.Microsoft Notepad or any other text editor\n"},{"uri":"http://example.org/posts/javascript/","title":"Javascript","tags":[],"description":"","content":"Java is a good programming language "},{"uri":"http://example.org/posts/","title":"Posts","tags":[],"description":"","content":""},{"uri":"http://example.org/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"http://example.org/tags/","title":"Tags","tags":[],"description":"","content":""}]